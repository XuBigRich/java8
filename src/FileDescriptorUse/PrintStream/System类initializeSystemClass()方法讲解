System类initializeSystemClass()方法很长但其实他的主要方法就两行(
    即:
    FileOutputStream fdOut = new FileOutputStream(FileDescriptor.out);
    setOut0(new PrintStream(fdOut, props.getProperty("sun.stdout.encoding")));
    将这两句话细分，可以划分为以下几步：
    第1步 FileDescriptor fd = FileDescriptor.out;
    第2步 FileOutputStream fdOut = new FileOutputStream(fd);
    第3步 String encoding=props.getProperty("sun.stdout.encoding")；
    第4步 PrintStream ps = new PrintStream(bufout, encoding);
    第5步 setOut0(ps);
    说明：
    (01) 第1步，获取FileDescriptor.java中的静态成员out，out是一个FileDescriptor对象，它实际上是“标准输出(屏幕)”的标识符。
    关于FileDescriptor的详细介绍，可以查看网易笔记
    FileDescriptor.java中与FileDescriptor.out相关代码如下：
    (02) 创建“标准输出”对应的“文件输出流”（这里我们还记得FileOutStream是用来描述文件的，所以这个地方也可以是屏幕也可以是另外一个程序或者文件）。
    (03) 获取存储在系统中对标准输出的编码格式定义
    (04) 根据相应编码格式，创建“标准输出”对应的“打印输出流”。
    (05) 执行setOut0(ps);

    我们重点看一下setOut0方法
    private static native void setOut0(PrintStream out);
    从中，我们发现setOut0()是一个native本地方法。通过openjdk，我们可以找到它对应的源码，如下：
    JNIEXPORT void JNICALL
    Java_java_lang_System_setOut0(JNIEnv *env, jclass cla, jobject stream)
    {
        jfieldID fid =
            (*env)->GetStaticFieldID(env,cla,"out","Ljava/io/PrintStream;");
        if (fid == 0)
            return;
        (*env)->SetStaticObjectField(env,cla,fid,stream);
    }
    说明：
    这是个JNI函数，我们来对它进行简单的分析。

    (01) 函数名
    JNIEXPORT void JNICALL Java_java_lang_System_setOut0(JNIEnv *env, jclass cla, jobject stream)
    这是JNI的静态注册方法，Java_java_lang_System_setOut0(JNIEnv *env, jclass cla, jobject stream)会和System.java中的setOut0(PrintStream out)关联；
    而且，参数stream 对应参数out。简单来说，我们调用setOut0()，实际上是调用的Java_java_lang_System_setOut0()。

    (02) jfieldID fid = (*env)->GetStaticFieldID(env,cla,"out","Ljava/io/PrintStream;");
    这句话的作用是获取System.java的静态成员out的jfieldID，"Ljava/io/PrintStream;"是说明out是java.io.PrintStream对象。
    获取out的jfieldID的作用，是我们需要通过操作“out的jfielID”来改变out的值。

    (03) (*env)->SetStaticObjectField(env,cla,fid,stream);

    这句话的作用是，设置fid(fid就是out的jfieldID)对应的静态成员的值为stream。
    stream是我们传给Java_java_lang_System_setOut0()的参数，也就是传给setOut0的参数。

    总结上面的内容。我们知道，setOut0(PrintStream ps)的作用，就是将ps设置为System.java的out静态变量。



    前面，已经说过FileDescriptor.out就是机器的“标准输出(屏幕)”的文件标识符。我们可以通俗的将文件标识符就理解为，FileDescriptor.out就是代表的“标准输出”。
    因此，在initializeSystemClass()中，上面的5步就是将“FileDescriptor.out”封装了起来。封装后的System.in既有缓冲功能；又有便利的操作接口，如print(), println(), printf()。

